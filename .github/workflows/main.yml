name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x] # Specify desired Node.js versions

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install CLI globally
      run: npm install -g ./

    - name: Run linters (placeholder)
      run: echo "Linting step placeholder - add your linting command here if configured"

    - name: Run tests
      run: npm test

    - name: Scaffold New Project
      run: hatch new MyTestProject

    - name: Build Scaffolded Project
      run: |
        cd MyTestProject
        hatch build

    # - name: Build project (placeholder)
    #   run: |
    #     echo "Build step placeholder - add your build command here if applicable"
    #     # npm run build --if-present

  # Placeholder job for Semantic Versioning and Release
  # This job would typically run only on the main branch after tests pass
  semantic_release:
    needs: build_and_test # Depends on successful build and test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions: # Required for semantic-release to create releases and push tags
      contents: write # To be able to publish a GitHub release
      issues: write # To be able to comment on released issues/PRs
      pull-requests: write # To be able to comment on released PRs
      id-token: write # To enable OIDC for npm provenance
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release to analyze commit history
          persist-credentials: false # Avoid exposing token to other steps
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x # Or your preferred Node.js version for release
          cache: 'npm'
      - name: Install semantic-release and plugins
        run: npm install semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/npm # or yarn add
      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_AUTOPUBLISH_TOKEN }} # Example: use a specific token for npm auto-publish
        run: npx semantic-release

# Notes on Semantic Versioning and Publishing:
# 1. Semantic Versioning:
#    - Uses conventional commit messages (e.g., "feat: ...", "fix: ...") to determine version bumps.
#    - Tools like 'semantic-release' automate versioning, changelog generation, and git tagging.
#    - The `semantic_release` job above is a basic example.
#    - Requires `GITHUB_TOKEN` with appropriate permissions (e.g., `contents: write`) to push tags/releases.
#      The `permissions` key in the `semantic_release` job attempts to set these.
#
# 2. Publishing to npm (example):
#    - `semantic-release` with the `@semantic-release/npm` plugin can publish to npm.
#    - Requires an `NPM_TOKEN` (e.g., `NPM_AUTOPUBLISH_TOKEN`) to be set as a secret in the GitHub repository settings.
#    - This token needs publish permissions for your package on npm.
#    - Ensure `package.json` `name` is unique and `version` is managed by semantic-release (i.e., don't manually bump it).
#    - The `publishConfig` field in `package.json` can specify the registry if it's not the default npm one.
#    - For npm provenance (secure, verifiable builds), Node 18+ and npm 9+ are recommended, and OIDC setup might be involved.
#
# 3. Publishing to GitHub Packages:
#    - Can also publish to GitHub Packages registry.
#    - Requires different configuration for npm/yarn (usually an `.npmrc` file pointing to GitHub's registry).
#    - `GITHUB_TOKEN` is typically used for authentication.
#    - The `@semantic-release/npm` plugin can be configured to publish to a specific registry.
#
# 4. Manual Steps (if automation is not yet set up or for initial setup):
#    - After merging to main and ensuring tests pass:
#    - Locally:
#      - Ensure your local main branch is up-to-date.
#      - `npm version <patch|minor|major>` (based on changes, if not using semantic-release).
#      - `git push --follow-tags` (to push the new version tag).
#      - `npm publish` (if publishing to npm and logged in with appropriate permissions).
#    - Or create a release manually via the GitHub UI, attaching any build artifacts.
#
# 5. Configuration for semantic-release:
#    - Typically configured via a `.releaserc.json`, `.releaserc.yaml`, `release.config.js`, or in `package.json`.
#    - Defines plugins (changelog, npm, git, github), branches to release from (e.g., main, next), etc.
#    - Example `package.json` section for semantic-release config:
#      "release": {
#        "branches": ["main"],
#        "plugins": [
#          "@semantic-release/commit-analyzer",
#          "@semantic-release/release-notes-generator",
#          "@semantic-release/changelog",
#          ["@semantic-release/npm", { "npmPublish": true, "pkgRoot": "." }],
#          ["@semantic-release/git", {
#            "assets": ["package.json", "CHANGELOG.md"],
#            "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
#          }],
#          "@semantic-release/github"
#        ]
#      }
#
# 6. Branching Strategy:
#    - A common strategy is to release from `main` for production releases.
#    - Feature branches are merged to `main` via PRs.
#    - `semantic-release` then picks up new commits on `main` to trigger a release if applicable.
#
# 7. Secrets:
#    - `GITHUB_TOKEN`: Automatically available to actions, but its default permissions might need to be
#      adjusted at the repository or organization level if `contents: write` etc. are not allowed by default.
#      The `permissions` key in the job is the preferred way to grant specific permissions for a job.
#    - `NPM_TOKEN`: Must be manually created on npmjs.com (or your npm registry) and added as an
#      encrypted secret to your GitHub repository settings (e.g., named `NPM_AUTOPUBLISH_TOKEN`).
